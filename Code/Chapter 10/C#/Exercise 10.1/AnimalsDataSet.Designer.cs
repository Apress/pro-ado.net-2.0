//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Exercise_10_1 {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("AnimalsDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class AnimalsDataSet : System.Data.DataSet {
        
        private AnimalsDataTable tableAnimals;
        
        private PetsDataTable tablePets;
        
        private PetBelongingDataTable tablePetBelonging;
        
        private System.Data.DataRelation relationFK_Animals_Pets;
        
        private System.Data.DataRelation relationFK_Pets_PetBelonging;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public AnimalsDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected AnimalsDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Animals"] != null)) {
                    base.Tables.Add(new AnimalsDataTable(ds.Tables["Animals"]));
                }
                if ((ds.Tables["Pets"] != null)) {
                    base.Tables.Add(new PetsDataTable(ds.Tables["Pets"]));
                }
                if ((ds.Tables["PetBelonging"] != null)) {
                    base.Tables.Add(new PetBelongingDataTable(ds.Tables["PetBelonging"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnimalsDataTable Animals {
            get {
                return this.tableAnimals;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PetsDataTable Pets {
            get {
                return this.tablePets;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PetBelongingDataTable PetBelonging {
            get {
                return this.tablePetBelonging;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            AnimalsDataSet cln = ((AnimalsDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Animals"] != null)) {
                    base.Tables.Add(new AnimalsDataTable(ds.Tables["Animals"]));
                }
                if ((ds.Tables["Pets"] != null)) {
                    base.Tables.Add(new PetsDataTable(ds.Tables["Pets"]));
                }
                if ((ds.Tables["PetBelonging"] != null)) {
                    base.Tables.Add(new PetBelongingDataTable(ds.Tables["PetBelonging"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableAnimals = ((AnimalsDataTable)(base.Tables["Animals"]));
            if ((initTable == true)) {
                if ((this.tableAnimals != null)) {
                    this.tableAnimals.InitVars();
                }
            }
            this.tablePets = ((PetsDataTable)(base.Tables["Pets"]));
            if ((initTable == true)) {
                if ((this.tablePets != null)) {
                    this.tablePets.InitVars();
                }
            }
            this.tablePetBelonging = ((PetBelongingDataTable)(base.Tables["PetBelonging"]));
            if ((initTable == true)) {
                if ((this.tablePetBelonging != null)) {
                    this.tablePetBelonging.InitVars();
                }
            }
            this.relationFK_Animals_Pets = this.Relations["FK_Animals_Pets"];
            this.relationFK_Pets_PetBelonging = this.Relations["FK_Pets_PetBelonging"];
        }
        
        private void InitClass() {
            this.DataSetName = "AnimalsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AnimalsDataSet.xsd";
            this.EnforceConstraints = false;
            this.tableAnimals = new AnimalsDataTable();
            base.Tables.Add(this.tableAnimals);
            this.tablePets = new PetsDataTable();
            base.Tables.Add(this.tablePets);
            this.tablePetBelonging = new PetBelongingDataTable();
            base.Tables.Add(this.tablePetBelonging);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Animals_Pets", new System.Data.DataColumn[] {
                        this.tableAnimals.AnimalIDColumn}, new System.Data.DataColumn[] {
                        this.tablePets.AnimalIDColumn});
            this.tablePets.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Pets_PetBelonging", new System.Data.DataColumn[] {
                        this.tablePets.PetIDColumn}, new System.Data.DataColumn[] {
                        this.tablePetBelonging.PetIDColumn});
            this.tablePetBelonging.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_Animals_Pets = new System.Data.DataRelation("FK_Animals_Pets", new System.Data.DataColumn[] {
                        this.tableAnimals.AnimalIDColumn}, new System.Data.DataColumn[] {
                        this.tablePets.AnimalIDColumn}, false);
            this.Relations.Add(this.relationFK_Animals_Pets);
            this.relationFK_Pets_PetBelonging = new System.Data.DataRelation("FK_Pets_PetBelonging", new System.Data.DataColumn[] {
                        this.tablePets.PetIDColumn}, new System.Data.DataColumn[] {
                        this.tablePetBelonging.PetIDColumn}, false);
            this.Relations.Add(this.relationFK_Pets_PetBelonging);
        }
        
        private bool ShouldSerializeAnimals() {
            return false;
        }
        
        private bool ShouldSerializePets() {
            return false;
        }
        
        private bool ShouldSerializePetBelonging() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            AnimalsDataSet ds = new AnimalsDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void AnimalsRowChangeEventHandler(object sender, AnimalsRowChangeEvent e);
        
        public delegate void PetsRowChangeEventHandler(object sender, PetsRowChangeEvent e);
        
        public delegate void PetBelongingRowChangeEventHandler(object sender, PetBelongingRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnimalsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAnimalID;
            
            private System.Data.DataColumn columnAnimalType;
            
            public AnimalsDataTable() {
                this.TableName = "Animals";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal AnimalsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected AnimalsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn AnimalIDColumn {
                get {
                    return this.columnAnimalID;
                }
            }
            
            public System.Data.DataColumn AnimalTypeColumn {
                get {
                    return this.columnAnimalType;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AnimalsRow this[int index] {
                get {
                    return ((AnimalsRow)(this.Rows[index]));
                }
            }
            
            public event AnimalsRowChangeEventHandler AnimalsRowChanged;
            
            public event AnimalsRowChangeEventHandler AnimalsRowChanging;
            
            public event AnimalsRowChangeEventHandler AnimalsRowDeleted;
            
            public event AnimalsRowChangeEventHandler AnimalsRowDeleting;
            
            public void AddAnimalsRow(AnimalsRow row) {
                this.Rows.Add(row);
            }
            
            public AnimalsRow AddAnimalsRow(string AnimalType) {
                AnimalsRow rowAnimalsRow = ((AnimalsRow)(this.NewRow()));
                rowAnimalsRow.ItemArray = new object[] {
                        null,
                        AnimalType};
                this.Rows.Add(rowAnimalsRow);
                return rowAnimalsRow;
            }
            
            public AnimalsRow FindByAnimalID(int AnimalID) {
                return ((AnimalsRow)(this.Rows.Find(new object[] {
                            AnimalID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                AnimalsDataTable cln = ((AnimalsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new AnimalsDataTable();
            }
            
            internal void InitVars() {
                this.columnAnimalID = base.Columns["AnimalID"];
                this.columnAnimalType = base.Columns["AnimalType"];
            }
            
            private void InitClass() {
                this.columnAnimalID = new System.Data.DataColumn("AnimalID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnimalID);
                this.columnAnimalType = new System.Data.DataColumn("AnimalType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnimalType);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAnimalID}, true));
                this.columnAnimalID.AutoIncrement = true;
                this.columnAnimalID.AutoIncrementStep = -1;
                this.columnAnimalID.AllowDBNull = false;
                this.columnAnimalID.ReadOnly = true;
                this.columnAnimalID.Unique = true;
            }
            
            public AnimalsRow NewAnimalsRow() {
                return ((AnimalsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AnimalsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AnimalsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnimalsRowChanged != null)) {
                    this.AnimalsRowChanged(this, new AnimalsRowChangeEvent(((AnimalsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnimalsRowChanging != null)) {
                    this.AnimalsRowChanging(this, new AnimalsRowChangeEvent(((AnimalsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnimalsRowDeleted != null)) {
                    this.AnimalsRowDeleted(this, new AnimalsRowChangeEvent(((AnimalsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnimalsRowDeleting != null)) {
                    this.AnimalsRowDeleting(this, new AnimalsRowChangeEvent(((AnimalsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAnimalsRow(AnimalsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AnimalsDataSet ds = new AnimalsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnimalsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PetsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPetID;
            
            private System.Data.DataColumn columnAnimalID;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnWeight;
            
            public PetsDataTable() {
                this.TableName = "Pets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PetsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PetsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn PetIDColumn {
                get {
                    return this.columnPetID;
                }
            }
            
            public System.Data.DataColumn AnimalIDColumn {
                get {
                    return this.columnAnimalID;
                }
            }
            
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            public System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PetsRow this[int index] {
                get {
                    return ((PetsRow)(this.Rows[index]));
                }
            }
            
            public event PetsRowChangeEventHandler PetsRowChanged;
            
            public event PetsRowChangeEventHandler PetsRowChanging;
            
            public event PetsRowChangeEventHandler PetsRowDeleted;
            
            public event PetsRowChangeEventHandler PetsRowDeleting;
            
            public void AddPetsRow(PetsRow row) {
                this.Rows.Add(row);
            }
            
            public PetsRow AddPetsRow(AnimalsRow parentAnimalsRowByFK_Animals_Pets, string FirstName, string LastName, int Weight) {
                PetsRow rowPetsRow = ((PetsRow)(this.NewRow()));
                rowPetsRow.ItemArray = new object[] {
                        null,
                        parentAnimalsRowByFK_Animals_Pets[0],
                        FirstName,
                        LastName,
                        Weight};
                this.Rows.Add(rowPetsRow);
                return rowPetsRow;
            }
            
            public PetsRow FindByPetID(int PetID) {
                return ((PetsRow)(this.Rows.Find(new object[] {
                            PetID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PetsDataTable cln = ((PetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PetsDataTable();
            }
            
            internal void InitVars() {
                this.columnPetID = base.Columns["PetID"];
                this.columnAnimalID = base.Columns["AnimalID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnWeight = base.Columns["Weight"];
            }
            
            private void InitClass() {
                this.columnPetID = new System.Data.DataColumn("PetID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPetID);
                this.columnAnimalID = new System.Data.DataColumn("AnimalID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnimalID);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnWeight = new System.Data.DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPetID}, true));
                this.columnPetID.AutoIncrement = true;
                this.columnPetID.AutoIncrementStep = -1;
                this.columnPetID.AllowDBNull = false;
                this.columnPetID.ReadOnly = true;
                this.columnPetID.Unique = true;
            }
            
            public PetsRow NewPetsRow() {
                return ((PetsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PetsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PetsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PetsRowChanged != null)) {
                    this.PetsRowChanged(this, new PetsRowChangeEvent(((PetsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PetsRowChanging != null)) {
                    this.PetsRowChanging(this, new PetsRowChangeEvent(((PetsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PetsRowDeleted != null)) {
                    this.PetsRowDeleted(this, new PetsRowChangeEvent(((PetsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PetsRowDeleting != null)) {
                    this.PetsRowDeleting(this, new PetsRowChangeEvent(((PetsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePetsRow(PetsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AnimalsDataSet ds = new AnimalsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PetBelongingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPetBelongingID;
            
            private System.Data.DataColumn columnPetID;
            
            private System.Data.DataColumn columnPrice;
            
            private System.Data.DataColumn columnName;
            
            public PetBelongingDataTable() {
                this.TableName = "PetBelonging";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal PetBelongingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected PetBelongingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn PetBelongingIDColumn {
                get {
                    return this.columnPetBelongingID;
                }
            }
            
            public System.Data.DataColumn PetIDColumn {
                get {
                    return this.columnPetID;
                }
            }
            
            public System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public PetBelongingRow this[int index] {
                get {
                    return ((PetBelongingRow)(this.Rows[index]));
                }
            }
            
            public event PetBelongingRowChangeEventHandler PetBelongingRowChanged;
            
            public event PetBelongingRowChangeEventHandler PetBelongingRowChanging;
            
            public event PetBelongingRowChangeEventHandler PetBelongingRowDeleted;
            
            public event PetBelongingRowChangeEventHandler PetBelongingRowDeleting;
            
            public void AddPetBelongingRow(PetBelongingRow row) {
                this.Rows.Add(row);
            }
            
            public PetBelongingRow AddPetBelongingRow(PetsRow parentPetsRowByFK_Pets_PetBelonging, decimal Price, string Name) {
                PetBelongingRow rowPetBelongingRow = ((PetBelongingRow)(this.NewRow()));
                rowPetBelongingRow.ItemArray = new object[] {
                        null,
                        parentPetsRowByFK_Pets_PetBelonging[0],
                        Price,
                        Name};
                this.Rows.Add(rowPetBelongingRow);
                return rowPetBelongingRow;
            }
            
            public PetBelongingRow FindByPetBelongingID(int PetBelongingID) {
                return ((PetBelongingRow)(this.Rows.Find(new object[] {
                            PetBelongingID})));
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PetBelongingDataTable cln = ((PetBelongingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PetBelongingDataTable();
            }
            
            internal void InitVars() {
                this.columnPetBelongingID = base.Columns["PetBelongingID"];
                this.columnPetID = base.Columns["PetID"];
                this.columnPrice = base.Columns["Price"];
                this.columnName = base.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnPetBelongingID = new System.Data.DataColumn("PetBelongingID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPetBelongingID);
                this.columnPetID = new System.Data.DataColumn("PetID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPetID);
                this.columnPrice = new System.Data.DataColumn("Price", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPetBelongingID}, true));
                this.columnPetBelongingID.AutoIncrement = true;
                this.columnPetBelongingID.AutoIncrementStep = -1;
                this.columnPetBelongingID.AllowDBNull = false;
                this.columnPetBelongingID.ReadOnly = true;
                this.columnPetBelongingID.Unique = true;
            }
            
            public PetBelongingRow NewPetBelongingRow() {
                return ((PetBelongingRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PetBelongingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PetBelongingRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PetBelongingRowChanged != null)) {
                    this.PetBelongingRowChanged(this, new PetBelongingRowChangeEvent(((PetBelongingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PetBelongingRowChanging != null)) {
                    this.PetBelongingRowChanging(this, new PetBelongingRowChangeEvent(((PetBelongingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PetBelongingRowDeleted != null)) {
                    this.PetBelongingRowDeleted(this, new PetBelongingRowChangeEvent(((PetBelongingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PetBelongingRowDeleting != null)) {
                    this.PetBelongingRowDeleting(this, new PetBelongingRowChangeEvent(((PetBelongingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePetBelongingRow(PetBelongingRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AnimalsDataSet ds = new AnimalsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PetBelongingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class AnimalsRow : System.Data.DataRow {
            
            private AnimalsDataTable tableAnimals;
            
            internal AnimalsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnimals = ((AnimalsDataTable)(this.Table));
            }
            
            public int AnimalID {
                get {
                    return ((int)(this[this.tableAnimals.AnimalIDColumn]));
                }
                set {
                    this[this.tableAnimals.AnimalIDColumn] = value;
                }
            }
            
            public string AnimalType {
                get {
                    try {
                        return ((string)(this[this.tableAnimals.AnimalTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AnimalType\' in table \'Animals\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnimals.AnimalTypeColumn] = value;
                }
            }
            
            public bool IsAnimalTypeNull() {
                return this.IsNull(this.tableAnimals.AnimalTypeColumn);
            }
            
            public void SetAnimalTypeNull() {
                this[this.tableAnimals.AnimalTypeColumn] = System.Convert.DBNull;
            }
            
            public PetsRow[] GetPetsRows() {
                return ((PetsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Animals_Pets"])));
            }
        }
        
        public partial class PetsRow : System.Data.DataRow {
            
            private PetsDataTable tablePets;
            
            internal PetsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePets = ((PetsDataTable)(this.Table));
            }
            
            public int PetID {
                get {
                    return ((int)(this[this.tablePets.PetIDColumn]));
                }
                set {
                    this[this.tablePets.PetIDColumn] = value;
                }
            }
            
            public int AnimalID {
                get {
                    try {
                        return ((int)(this[this.tablePets.AnimalIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AnimalID\' in table \'Pets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePets.AnimalIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablePets.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Pets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePets.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablePets.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastName\' in table \'Pets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePets.LastNameColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tablePets.WeightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Weight\' in table \'Pets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePets.WeightColumn] = value;
                }
            }
            
            public AnimalsRow AnimalsRow {
                get {
                    return ((AnimalsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Animals_Pets"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Animals_Pets"]);
                }
            }
            
            public bool IsAnimalIDNull() {
                return this.IsNull(this.tablePets.AnimalIDColumn);
            }
            
            public void SetAnimalIDNull() {
                this[this.tablePets.AnimalIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablePets.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tablePets.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tablePets.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tablePets.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeightNull() {
                return this.IsNull(this.tablePets.WeightColumn);
            }
            
            public void SetWeightNull() {
                this[this.tablePets.WeightColumn] = System.Convert.DBNull;
            }
            
            public PetBelongingRow[] GetPetBelongingRows() {
                return ((PetBelongingRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Pets_PetBelonging"])));
            }
        }
        
        public partial class PetBelongingRow : System.Data.DataRow {
            
            private PetBelongingDataTable tablePetBelonging;
            
            internal PetBelongingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePetBelonging = ((PetBelongingDataTable)(this.Table));
            }
            
            public int PetBelongingID {
                get {
                    return ((int)(this[this.tablePetBelonging.PetBelongingIDColumn]));
                }
                set {
                    this[this.tablePetBelonging.PetBelongingIDColumn] = value;
                }
            }
            
            public int PetID {
                get {
                    try {
                        return ((int)(this[this.tablePetBelonging.PetIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PetID\' in table \'PetBelonging\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePetBelonging.PetIDColumn] = value;
                }
            }
            
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tablePetBelonging.PriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Price\' in table \'PetBelonging\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePetBelonging.PriceColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePetBelonging.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'PetBelonging\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePetBelonging.NameColumn] = value;
                }
            }
            
            public PetsRow PetsRow {
                get {
                    return ((PetsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Pets_PetBelonging"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Pets_PetBelonging"]);
                }
            }
            
            public bool IsPetIDNull() {
                return this.IsNull(this.tablePetBelonging.PetIDColumn);
            }
            
            public void SetPetIDNull() {
                this[this.tablePetBelonging.PetIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriceNull() {
                return this.IsNull(this.tablePetBelonging.PriceColumn);
            }
            
            public void SetPriceNull() {
                this[this.tablePetBelonging.PriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tablePetBelonging.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tablePetBelonging.NameColumn] = System.Convert.DBNull;
            }
        }
        
        public class AnimalsRowChangeEvent : System.EventArgs {
            
            private AnimalsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public AnimalsRowChangeEvent(AnimalsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AnimalsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class PetsRowChangeEvent : System.EventArgs {
            
            private PetsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PetsRowChangeEvent(PetsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class PetBelongingRowChangeEvent : System.EventArgs {
            
            private PetBelongingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PetBelongingRowChangeEvent(PetBelongingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PetBelongingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
