'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50215.44
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("VariousTables"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
 System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")>  _
Partial Public Class VariousTables
    Inherits System.Data.DataSet
    
    Private tableTable1 As Table1DataTable
    
    Private tableTable2 As Table2DataTable
    
    Private tableTable3 As Table3DataTable
    
    Private tableTable0 As Table0DataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Table1")) Is Nothing) Then
                MyBase.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
            End If
            If (Not (ds.Tables("Table2")) Is Nothing) Then
                MyBase.Tables.Add(New Table2DataTable(ds.Tables("Table2")))
            End If
            If (Not (ds.Tables("Table3")) Is Nothing) Then
                MyBase.Tables.Add(New Table3DataTable(ds.Tables("Table3")))
            End If
            If (Not (ds.Tables("Table0")) Is Nothing) Then
                MyBase.Tables.Add(New Table0DataTable(ds.Tables("Table0")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table1() As Table1DataTable
        Get
            Return Me.tableTable1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table2() As Table2DataTable
        Get
            Return Me.tableTable2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table3() As Table3DataTable
        Get
            Return Me.tableTable3
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table0() As Table0DataTable
        Get
            Return Me.tableTable0
        End Get
    End Property
    
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(false)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As VariousTables = CType(MyBase.Clone,VariousTables)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Table1")) Is Nothing) Then
                MyBase.Tables.Add(New Table1DataTable(ds.Tables("Table1")))
            End If
            If (Not (ds.Tables("Table2")) Is Nothing) Then
                MyBase.Tables.Add(New Table2DataTable(ds.Tables("Table2")))
            End If
            If (Not (ds.Tables("Table3")) Is Nothing) Then
                MyBase.Tables.Add(New Table3DataTable(ds.Tables("Table3")))
            End If
            If (Not (ds.Tables("Table0")) Is Nothing) Then
                MyBase.Tables.Add(New Table0DataTable(ds.Tables("Table0")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTable1 = CType(MyBase.Tables("Table1"),Table1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable1) Is Nothing) Then
                Me.tableTable1.InitVars
            End If
        End If
        Me.tableTable2 = CType(MyBase.Tables("Table2"),Table2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable2) Is Nothing) Then
                Me.tableTable2.InitVars
            End If
        End If
        Me.tableTable3 = CType(MyBase.Tables("Table3"),Table3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable3) Is Nothing) Then
                Me.tableTable3.InitVars
            End If
        End If
        Me.tableTable0 = CType(MyBase.Tables("Table0"),Table0DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable0) Is Nothing) Then
                Me.tableTable0.InitVars
            End If
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "VariousTables"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/VariousTables.xsd"
        Me.EnforceConstraints = false
        Me.tableTable1 = New Table1DataTable
        MyBase.Tables.Add(Me.tableTable1)
        Me.tableTable2 = New Table2DataTable
        MyBase.Tables.Add(Me.tableTable2)
        Me.tableTable3 = New Table3DataTable
        MyBase.Tables.Add(Me.tableTable3)
        Me.tableTable0 = New Table0DataTable
        MyBase.Tables.Add(Me.tableTable0)
    End Sub
    
    Private Function ShouldSerializeTable1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTable2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTable3() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTable0() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As VariousTables = New VariousTables
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub Table1RowChangeEventHandler(ByVal sender As Object, ByVal e As Table1RowChangeEvent)
    
    Public Delegate Sub Table2RowChangeEventHandler(ByVal sender As Object, ByVal e As Table2RowChangeEvent)
    
    Public Delegate Sub Table3RowChangeEventHandler(ByVal sender As Object, ByVal e As Table3RowChangeEvent)
    
    Public Delegate Sub Table0RowChangeEventHandler(ByVal sender As Object, ByVal e As Table0RowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table1DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnColumnA As System.Data.DataColumn
        
        Private columnColumnB As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Table1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property ColumnAColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnA
            End Get
        End Property
        
        Public ReadOnly Property ColumnBColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnB
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table1Row
            Get
                Return CType(Me.Rows(index),Table1Row)
            End Get
        End Property
        
        Public Event Table1RowChanged As Table1RowChangeEventHandler
        
        Public Event Table1RowChanging As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleted As Table1RowChangeEventHandler
        
        Public Event Table1RowDeleting As Table1RowChangeEventHandler
        
        Public Overloads Sub AddTable1Row(ByVal row As Table1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable1Row(ByVal ColumnA As String, ByVal ColumnB As String) As Table1Row
            Dim rowTable1Row As Table1Row = CType(Me.NewRow,Table1Row)
            rowTable1Row.ItemArray = New Object() {ColumnA, ColumnB}
            Me.Rows.Add(rowTable1Row)
            Return rowTable1Row
        End Function
        
        Public Function FindByColumnA(ByVal ColumnA As String) As Table1Row
            Return CType(Me.Rows.Find(New Object() {ColumnA}),Table1Row)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Table1DataTable = CType(MyBase.Clone,Table1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Table1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnColumnA = MyBase.Columns("ColumnA")
            Me.columnColumnB = MyBase.Columns("ColumnB")
        End Sub
        
        Private Sub InitClass()
            Me.columnColumnA = New System.Data.DataColumn("ColumnA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnA)
            Me.columnColumnB = New System.Data.DataColumn("ColumnB", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnB)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnColumnA}, true))
            Me.columnColumnA.AllowDBNull = false
            Me.columnColumnA.Unique = true
        End Sub
        
        Public Function NewTable1Row() As Table1Row
            Return CType(Me.NewRow,Table1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Table1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table1RowChangedEvent) Is Nothing) Then
                RaiseEvent Table1RowChanged(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table1RowChangingEvent) Is Nothing) Then
                RaiseEvent Table1RowChanging(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleted(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table1RowDeleting(Me, New Table1RowChangeEvent(CType(e.Row,Table1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable1Row(ByVal row As Table1Row)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VariousTables = New VariousTables
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table2DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnColumnA As System.Data.DataColumn
        
        Private columnColumnC As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Table2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property ColumnAColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnA
            End Get
        End Property
        
        Public ReadOnly Property ColumnCColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnC
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table2Row
            Get
                Return CType(Me.Rows(index),Table2Row)
            End Get
        End Property
        
        Public Event Table2RowChanged As Table2RowChangeEventHandler
        
        Public Event Table2RowChanging As Table2RowChangeEventHandler
        
        Public Event Table2RowDeleted As Table2RowChangeEventHandler
        
        Public Event Table2RowDeleting As Table2RowChangeEventHandler
        
        Public Overloads Sub AddTable2Row(ByVal row As Table2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable2Row(ByVal ColumnA As String, ByVal ColumnC As String) As Table2Row
            Dim rowTable2Row As Table2Row = CType(Me.NewRow,Table2Row)
            rowTable2Row.ItemArray = New Object() {ColumnA, ColumnC}
            Me.Rows.Add(rowTable2Row)
            Return rowTable2Row
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Table2DataTable = CType(MyBase.Clone,Table2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Table2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnColumnA = MyBase.Columns("ColumnA")
            Me.columnColumnC = MyBase.Columns("ColumnC")
        End Sub
        
        Private Sub InitClass()
            Me.columnColumnA = New System.Data.DataColumn("ColumnA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnA)
            Me.columnColumnC = New System.Data.DataColumn("ColumnC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnC)
            Me.columnColumnA.Caption = "Column1"
            Me.columnColumnC.Caption = "Column2"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
        End Sub
        
        Public Function NewTable2Row() As Table2Row
            Return CType(Me.NewRow,Table2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Table2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table2RowChangedEvent) Is Nothing) Then
                RaiseEvent Table2RowChanged(Me, New Table2RowChangeEvent(CType(e.Row,Table2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table2RowChangingEvent) Is Nothing) Then
                RaiseEvent Table2RowChanging(Me, New Table2RowChangeEvent(CType(e.Row,Table2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table2RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table2RowDeleted(Me, New Table2RowChangeEvent(CType(e.Row,Table2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table2RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table2RowDeleting(Me, New Table2RowChangeEvent(CType(e.Row,Table2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable2Row(ByVal row As Table2Row)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VariousTables = New VariousTables
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table3DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnColumnD As System.Data.DataColumn
        
        Private columnColumnE As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Table3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property ColumnDColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnD
            End Get
        End Property
        
        Public ReadOnly Property ColumnEColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnE
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table3Row
            Get
                Return CType(Me.Rows(index),Table3Row)
            End Get
        End Property
        
        Public Event Table3RowChanged As Table3RowChangeEventHandler
        
        Public Event Table3RowChanging As Table3RowChangeEventHandler
        
        Public Event Table3RowDeleted As Table3RowChangeEventHandler
        
        Public Event Table3RowDeleting As Table3RowChangeEventHandler
        
        Public Overloads Sub AddTable3Row(ByVal row As Table3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable3Row(ByVal ColumnD As String, ByVal ColumnE As String) As Table3Row
            Dim rowTable3Row As Table3Row = CType(Me.NewRow,Table3Row)
            rowTable3Row.ItemArray = New Object() {ColumnD, ColumnE}
            Me.Rows.Add(rowTable3Row)
            Return rowTable3Row
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Table3DataTable = CType(MyBase.Clone,Table3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Table3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnColumnD = MyBase.Columns("ColumnD")
            Me.columnColumnE = MyBase.Columns("ColumnE")
        End Sub
        
        Private Sub InitClass()
            Me.columnColumnD = New System.Data.DataColumn("ColumnD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnD)
            Me.columnColumnE = New System.Data.DataColumn("ColumnE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnE)
            Me.columnColumnD.Caption = "Column1"
            Me.columnColumnE.Caption = "Column2"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
        End Sub
        
        Public Function NewTable3Row() As Table3Row
            Return CType(Me.NewRow,Table3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Table3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table3RowChangedEvent) Is Nothing) Then
                RaiseEvent Table3RowChanged(Me, New Table3RowChangeEvent(CType(e.Row,Table3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table3RowChangingEvent) Is Nothing) Then
                RaiseEvent Table3RowChanging(Me, New Table3RowChangeEvent(CType(e.Row,Table3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table3RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table3RowDeleted(Me, New Table3RowChangeEvent(CType(e.Row,Table3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table3RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table3RowDeleting(Me, New Table3RowChangeEvent(CType(e.Row,Table3Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable3Row(ByVal row As Table3Row)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VariousTables = New VariousTables
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table0DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnColumnA As System.Data.DataColumn
        
        Private columnColumnB As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Table0"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property ColumnAColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnA
            End Get
        End Property
        
        Public ReadOnly Property ColumnBColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumnB
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table0Row
            Get
                Return CType(Me.Rows(index),Table0Row)
            End Get
        End Property
        
        Public Event Table0RowChanged As Table0RowChangeEventHandler
        
        Public Event Table0RowChanging As Table0RowChangeEventHandler
        
        Public Event Table0RowDeleted As Table0RowChangeEventHandler
        
        Public Event Table0RowDeleting As Table0RowChangeEventHandler
        
        Public Overloads Sub AddTable0Row(ByVal row As Table0Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTable0Row(ByVal ColumnA As String, ByVal ColumnB As String) As Table0Row
            Dim rowTable0Row As Table0Row = CType(Me.NewRow,Table0Row)
            rowTable0Row.ItemArray = New Object() {ColumnA, ColumnB}
            Me.Rows.Add(rowTable0Row)
            Return rowTable0Row
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Table0DataTable = CType(MyBase.Clone,Table0DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Table0DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnColumnA = MyBase.Columns("ColumnA")
            Me.columnColumnB = MyBase.Columns("ColumnB")
        End Sub
        
        Private Sub InitClass()
            Me.columnColumnA = New System.Data.DataColumn("ColumnA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnA)
            Me.columnColumnB = New System.Data.DataColumn("ColumnB", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnB)
            Me.columnColumnA.AllowDBNull = false
            Me.Locale = New System.Globalization.CultureInfo("en-US")
        End Sub
        
        Public Function NewTable0Row() As Table0Row
            Return CType(Me.NewRow,Table0Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Table0Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Table0Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table0RowChangedEvent) Is Nothing) Then
                RaiseEvent Table0RowChanged(Me, New Table0RowChangeEvent(CType(e.Row,Table0Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table0RowChangingEvent) Is Nothing) Then
                RaiseEvent Table0RowChanging(Me, New Table0RowChangeEvent(CType(e.Row,Table0Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table0RowDeletedEvent) Is Nothing) Then
                RaiseEvent Table0RowDeleted(Me, New Table0RowChangeEvent(CType(e.Row,Table0Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table0RowDeletingEvent) Is Nothing) Then
                RaiseEvent Table0RowDeleting(Me, New Table0RowChangeEvent(CType(e.Row,Table0Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTable0Row(ByVal row As Table0Row)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VariousTables = New VariousTables
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table0DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class Table1Row
        Inherits System.Data.DataRow
        
        Private tableTable1 As Table1DataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable1 = CType(Me.Table,Table1DataTable)
        End Sub
        
        Public Property ColumnA() As String
            Get
                Return CType(Me(Me.tableTable1.ColumnAColumn),String)
            End Get
            Set
                Me(Me.tableTable1.ColumnAColumn) = value
            End Set
        End Property
        
        Public Property ColumnB() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable1.ColumnBColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ColumnB' in table 'Table1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable1.ColumnBColumn) = value
            End Set
        End Property
        
        Public Function IsColumnBNull() As Boolean
            Return Me.IsNull(Me.tableTable1.ColumnBColumn)
        End Function
        
        Public Sub SetColumnBNull()
            Me(Me.tableTable1.ColumnBColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class Table2Row
        Inherits System.Data.DataRow
        
        Private tableTable2 As Table2DataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable2 = CType(Me.Table,Table2DataTable)
        End Sub
        
        Public Property ColumnA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable2.ColumnAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ColumnA' in table 'Table2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable2.ColumnAColumn) = value
            End Set
        End Property
        
        Public Property ColumnC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable2.ColumnCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ColumnC' in table 'Table2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable2.ColumnCColumn) = value
            End Set
        End Property
        
        Public Function IsColumnANull() As Boolean
            Return Me.IsNull(Me.tableTable2.ColumnAColumn)
        End Function
        
        Public Sub SetColumnANull()
            Me(Me.tableTable2.ColumnAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsColumnCNull() As Boolean
            Return Me.IsNull(Me.tableTable2.ColumnCColumn)
        End Function
        
        Public Sub SetColumnCNull()
            Me(Me.tableTable2.ColumnCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class Table3Row
        Inherits System.Data.DataRow
        
        Private tableTable3 As Table3DataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable3 = CType(Me.Table,Table3DataTable)
        End Sub
        
        Public Property ColumnD() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable3.ColumnDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ColumnD' in table 'Table3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable3.ColumnDColumn) = value
            End Set
        End Property
        
        Public Property ColumnE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable3.ColumnEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ColumnE' in table 'Table3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable3.ColumnEColumn) = value
            End Set
        End Property
        
        Public Function IsColumnDNull() As Boolean
            Return Me.IsNull(Me.tableTable3.ColumnDColumn)
        End Function
        
        Public Sub SetColumnDNull()
            Me(Me.tableTable3.ColumnDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsColumnENull() As Boolean
            Return Me.IsNull(Me.tableTable3.ColumnEColumn)
        End Function
        
        Public Sub SetColumnENull()
            Me(Me.tableTable3.ColumnEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class Table0Row
        Inherits System.Data.DataRow
        
        Private tableTable0 As Table0DataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable0 = CType(Me.Table,Table0DataTable)
        End Sub
        
        Public Property ColumnA() As String
            Get
                Return CType(Me(Me.tableTable0.ColumnAColumn),String)
            End Get
            Set
                Me(Me.tableTable0.ColumnAColumn) = value
            End Set
        End Property
        
        Public Property ColumnB() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable0.ColumnBColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ColumnB' in table 'Table0' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable0.ColumnBColumn) = value
            End Set
        End Property
        
        Public Function IsColumnBNull() As Boolean
            Return Me.IsNull(Me.tableTable0.ColumnBColumn)
        End Function
        
        Public Sub SetColumnBNull()
            Me(Me.tableTable0.ColumnBColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class Table1RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Table1Row
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Table1Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Table1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class Table2RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Table2Row
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Table2Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Table2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class Table3RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Table3Row
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Table3Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Table3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class Table0RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Table0Row
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Table0Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Table0Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
