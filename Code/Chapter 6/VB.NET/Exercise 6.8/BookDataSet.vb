'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version:2.0.40607.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System

'
'This source code was auto-generated by xsd, Version=2.0.40607.42.
'

<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("BookDataSet")>  _
Partial Public Class BookDataSet
    Inherits System.Data.DataSet
    
    Private tableBooks As BooksDataTable
    
    Private tableBookReviews As BookReviewsDataTable
    
    Private relationKeyBookIDRef As System.Data.DataRelation
    
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Books")) Is Nothing) Then
                MyBase.Tables.Add(New BooksDataTable(ds.Tables("Books")))
            End If
            If (Not (ds.Tables("BookReviews")) Is Nothing) Then
                MyBase.Tables.Add(New BookReviewsDataTable(ds.Tables("BookReviews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Books() As BooksDataTable
        Get
            Return Me.tableBooks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BookReviews() As BookReviewsDataTable
        Get
            Return Me.tableBookReviews
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As BookDataSet = CType(MyBase.Clone,BookDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        Me.Reset
        Dim ds As System.Data.DataSet = New System.Data.DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Books")) Is Nothing) Then
            MyBase.Tables.Add(New BooksDataTable(ds.Tables("Books")))
        End If
        If (Not (ds.Tables("BookReviews")) Is Nothing) Then
            MyBase.Tables.Add(New BookReviewsDataTable(ds.Tables("BookReviews")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBooks = CType(MyBase.Tables("Books"),BooksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBooks) Is Nothing) Then
                Me.tableBooks.InitVars
            End If
        End If
        Me.tableBookReviews = CType(MyBase.Tables("BookReviews"),BookReviewsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBookReviews) Is Nothing) Then
                Me.tableBookReviews.InitVars
            End If
        End If
        Me.relationKeyBookIDRef = Me.Relations("KeyBookIDRef")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BookDataSet"
        Me.Prefix = ""
        Me.Namespace = "urn:apress-proadonet-chapter5-BookDataSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBooks = New BooksDataTable
        MyBase.Tables.Add(Me.tableBooks)
        Me.tableBookReviews = New BookReviewsDataTable
        MyBase.Tables.Add(Me.tableBookReviews)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("KeyBookIDRef", New System.Data.DataColumn() {Me.tableBooks.BookIDColumn}, New System.Data.DataColumn() {Me.tableBookReviews.BookIDColumn})
        Me.tableBookReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationKeyBookIDRef = New System.Data.DataRelation("KeyBookIDRef", New System.Data.DataColumn() {Me.tableBooks.BookIDColumn}, New System.Data.DataColumn() {Me.tableBookReviews.BookIDColumn}, false)
        Me.Relations.Add(Me.relationKeyBookIDRef)
        Me.ExtendedProperties.Add("DSGenerator_DataSetName", "BookDataSet")
        Me.ExtendedProperties.Add("User_DataSetName", "BookDataSet")
    End Sub
    
    Private Function ShouldSerializeBooks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBookReviews() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BookDataSet = New BookDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        If PublishLegacyWSDL Then
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
        Else
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(0)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            sequence.MaxOccurs = Decimal.MaxValue
            Dim attribute As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute.Name = "namespace"
            attribute.FixedValue = ds.Namespace
            type.Attributes.Add(attribute)
        End If
        type.Particle = sequence
        Return type
    End Function
    
    Protected Shared Function PublishLegacyWSDL() As Boolean
        Dim settings As System.Collections.Specialized.NameValueCollection = CType(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset"),System.Collections.Specialized.NameValueCollection)
        If (Not (settings) Is Nothing) Then
            Dim values() As String = settings.GetValues("WSDL_VERSION")
            If (Not (values) Is Nothing) Then
                Dim version As Single = Single.Parse(CType(values(0),String), CType(Nothing,System.IFormatProvider))
                Return (version < 2)
            End If
        End If
        Return true
    End Function
    
    Public Delegate Sub BooksRowChangeEventHandler(ByVal sender As Object, ByVal e As BooksRowChangeEvent)
    
    Public Delegate Sub BookReviewsRowChangeEventHandler(ByVal sender As Object, ByVal e As BookReviewsRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BooksDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookID As System.Data.DataColumn
        
        Private columnTitle As System.Data.DataColumn
        
        Private columnPublisher As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Books"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property BookIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property PublisherColumn() As System.Data.DataColumn
            Get
                Return Me.columnPublisher
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BooksRow
            Get
                Return CType(Me.Rows(index),BooksRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event BookIDChanging As BookIDChangeEventHandler
        
        Public Event BookIDChanged As BookIDChangeEventHandler
        
        Public Event TitleChanging As TitleChangeEventHandler
        
        Public Event TitleChanged As TitleChangeEventHandler
        
        Public Event PublisherChanging As PublisherChangeEventHandler
        
        Public Event PublisherChanged As PublisherChangeEventHandler
        
        Public Event BooksRowChanged As BooksRowChangeEventHandler
        
        Public Event BooksRowChanging As BooksRowChangeEventHandler
        
        Public Event BooksRowDeleted As BooksRowChangeEventHandler
        
        Public Event BooksRowDeleting As BooksRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "BookID") Then
                If (Not (Me.BookIDChangingEvent) Is Nothing) Then
                    RaiseEvent BookIDChanging(Me, New BookIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Title") Then
                    If (Not (Me.TitleChangingEvent) Is Nothing) Then
                        RaiseEvent TitleChanging(Me, New TitleChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "Publisher") Then
                        If (Not (Me.PublisherChangingEvent) Is Nothing) Then
                            RaiseEvent PublisherChanging(Me, New PublisherChangeEventArg(e))
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "BookID") Then
                If (Not (Me.BookIDChangedEvent) Is Nothing) Then
                    RaiseEvent BookIDChanged(Me, New BookIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Title") Then
                    If (Not (Me.TitleChangedEvent) Is Nothing) Then
                        RaiseEvent TitleChanged(Me, New TitleChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "Publisher") Then
                        If (Not (Me.PublisherChangedEvent) Is Nothing) Then
                            RaiseEvent PublisherChanged(Me, New PublisherChangeEventArg(e))
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddBooksRow(ByVal row As BooksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBooksRow(ByVal BookID As Long, ByVal Title As String, ByVal Publisher As String) As BooksRow
            Dim rowBooksRow As BooksRow = CType(Me.NewRow,BooksRow)
            rowBooksRow.ItemArray = New Object() {BookID, Title, Publisher}
            Me.Rows.Add(rowBooksRow)
            Return rowBooksRow
        End Function
        
        Public Function FindByBookID(ByVal BookID As Long) As BooksRow
            Return CType(Me.Rows.Find(New Object() {BookID}),BooksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BooksDataTable = CType(MyBase.Clone,BooksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BooksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookID = MyBase.Columns("BookID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnPublisher = MyBase.Columns("Publisher")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookID = New System.Data.DataColumn("BookID", GetType(Long), Nothing, System.Data.MappingType.Element)
            Me.columnBookID.ExtendedProperties.Add("Generator_ChangedEventName", "BookIDChanged")
            Me.columnBookID.ExtendedProperties.Add("Generator_ChangingEventName", "BookIDChanging")
            Me.columnBookID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "BookID")
            Me.columnBookID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "BookIDColumn")
            Me.columnBookID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBookID")
            Me.columnBookID.ExtendedProperties.Add("Generator_DelegateName", "BookIDChangeEventHandler")
            Me.columnBookID.ExtendedProperties.Add("Generator_EventArgName", "BookIDChangeEventArg")
            MyBase.Columns.Add(Me.columnBookID)
            Me.columnTitle = New System.Data.DataColumn("Title", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnTitle.ExtendedProperties.Add("Generator_ChangedEventName", "TitleChanged")
            Me.columnTitle.ExtendedProperties.Add("Generator_ChangingEventName", "TitleChanging")
            Me.columnTitle.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Title")
            Me.columnTitle.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "TitleColumn")
            Me.columnTitle.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTitle")
            Me.columnTitle.ExtendedProperties.Add("Generator_DelegateName", "TitleChangeEventHandler")
            Me.columnTitle.ExtendedProperties.Add("Generator_EventArgName", "TitleChangeEventArg")
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnPublisher = New System.Data.DataColumn("Publisher", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnPublisher.ExtendedProperties.Add("Generator_ChangedEventName", "PublisherChanged")
            Me.columnPublisher.ExtendedProperties.Add("Generator_ChangingEventName", "PublisherChanging")
            Me.columnPublisher.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Publisher")
            Me.columnPublisher.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PublisherColumn")
            Me.columnPublisher.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPublisher")
            Me.columnPublisher.ExtendedProperties.Add("Generator_DelegateName", "PublisherChangeEventHandler")
            Me.columnPublisher.ExtendedProperties.Add("Generator_EventArgName", "PublisherChangeEventArg")
            MyBase.Columns.Add(Me.columnPublisher)
            Me.Constraints.Add(New System.Data.UniqueConstraint("KeyBookID", New System.Data.DataColumn() {Me.columnBookID}, true))
            Me.columnBookID.AllowDBNull = false
            Me.columnBookID.Unique = true
            Me.ExtendedProperties.Add("Generator_RowClassName", "BooksRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "BooksRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "BooksRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "BooksDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "Books")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableBooks")
        End Sub
        
        Public Function NewBooksRow() As BooksRow
            Return CType(Me.NewRow,BooksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New BooksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BooksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BooksRowChangedEvent) Is Nothing) Then
                RaiseEvent BooksRowChanged(Me, New BooksRowChangeEvent(CType(e.Row,BooksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BooksRowChangingEvent) Is Nothing) Then
                RaiseEvent BooksRowChanging(Me, New BooksRowChangeEvent(CType(e.Row,BooksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BooksRowDeletedEvent) Is Nothing) Then
                RaiseEvent BooksRowDeleted(Me, New BooksRowChangeEvent(CType(e.Row,BooksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BooksRowDeletingEvent) Is Nothing) Then
                RaiseEvent BooksRowDeleting(Me, New BooksRowChangeEvent(CType(e.Row,BooksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBooksRow(ByVal row As BooksRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As BookDataSet = New BookDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BooksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub BookIDChangeEventHandler(ByVal sender As BooksDataTable, ByVal e As BookIDChangeEventArg)
        
        Public Class BookIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As BooksRow
                Get
                    Return CType(Me.evArgs.Row,BooksRow)
                End Get
            End Property
            
            Public ReadOnly Property BookIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Long
                Get
                    Return CType(Me.evArgs.ProposedValue,Long)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Long)
                End Set
            End Property
        End Class
        
        Public Delegate Sub TitleChangeEventHandler(ByVal sender As BooksDataTable, ByVal e As TitleChangeEventArg)
        
        Public Class TitleChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As BooksRow
                Get
                    Return CType(Me.evArgs.Row,BooksRow)
                End Get
            End Property
            
            Public ReadOnly Property TitleColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub PublisherChangeEventHandler(ByVal sender As BooksDataTable, ByVal e As PublisherChangeEventArg)
        
        Public Class PublisherChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As BooksRow
                Get
                    Return CType(Me.evArgs.Row,BooksRow)
                End Get
            End Property
            
            Public ReadOnly Property PublisherColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BookReviewsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookID As System.Data.DataColumn
        
        Private columnRating As System.Data.DataColumn
        
        Private columnReview As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "BookReviews"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property BookIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        Friend ReadOnly Property RatingColumn() As System.Data.DataColumn
            Get
                Return Me.columnRating
            End Get
        End Property
        
        Friend ReadOnly Property ReviewColumn() As System.Data.DataColumn
            Get
                Return Me.columnReview
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BookReviewsRow
            Get
                Return CType(Me.Rows(index),BookReviewsRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event BookIDChanging As BookIDChangeEventHandler
        
        Public Event BookIDChanged As BookIDChangeEventHandler
        
        Public Event RatingChanging As RatingChangeEventHandler
        
        Public Event RatingChanged As RatingChangeEventHandler
        
        Public Event ReviewChanging As ReviewChangeEventHandler
        
        Public Event ReviewChanged As ReviewChangeEventHandler
        
        Public Event BookReviewsRowChanged As BookReviewsRowChangeEventHandler
        
        Public Event BookReviewsRowChanging As BookReviewsRowChangeEventHandler
        
        Public Event BookReviewsRowDeleted As BookReviewsRowChangeEventHandler
        
        Public Event BookReviewsRowDeleting As BookReviewsRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "BookID") Then
                If (Not (Me.BookIDChangingEvent) Is Nothing) Then
                    RaiseEvent BookIDChanging(Me, New BookIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Rating") Then
                    If (Not (Me.RatingChangingEvent) Is Nothing) Then
                        RaiseEvent RatingChanging(Me, New RatingChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "Review") Then
                        If (Not (Me.ReviewChangingEvent) Is Nothing) Then
                            RaiseEvent ReviewChanging(Me, New ReviewChangeEventArg(e))
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "BookID") Then
                If (Not (Me.BookIDChangedEvent) Is Nothing) Then
                    RaiseEvent BookIDChanged(Me, New BookIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Rating") Then
                    If (Not (Me.RatingChangedEvent) Is Nothing) Then
                        RaiseEvent RatingChanged(Me, New RatingChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "Review") Then
                        If (Not (Me.ReviewChangedEvent) Is Nothing) Then
                            RaiseEvent ReviewChanged(Me, New ReviewChangeEventArg(e))
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddBookReviewsRow(ByVal row As BookReviewsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBookReviewsRow(ByVal parentBooksRowByKeyBookIDRef As BooksRow, ByVal Rating As Long, ByVal Review As String) As BookReviewsRow
            Dim rowBookReviewsRow As BookReviewsRow = CType(Me.NewRow,BookReviewsRow)
            rowBookReviewsRow.ItemArray = New Object() {parentBooksRowByKeyBookIDRef(0), Rating, Review}
            Me.Rows.Add(rowBookReviewsRow)
            Return rowBookReviewsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BookReviewsDataTable = CType(MyBase.Clone,BookReviewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BookReviewsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookID = MyBase.Columns("BookID")
            Me.columnRating = MyBase.Columns("Rating")
            Me.columnReview = MyBase.Columns("Review")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookID = New System.Data.DataColumn("BookID", GetType(Long), Nothing, System.Data.MappingType.Element)
            Me.columnBookID.ExtendedProperties.Add("Generator_ChangedEventName", "BookIDChanged")
            Me.columnBookID.ExtendedProperties.Add("Generator_ChangingEventName", "BookIDChanging")
            Me.columnBookID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "BookID")
            Me.columnBookID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "BookIDColumn")
            Me.columnBookID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBookID")
            Me.columnBookID.ExtendedProperties.Add("Generator_DelegateName", "BookIDChangeEventHandler")
            Me.columnBookID.ExtendedProperties.Add("Generator_EventArgName", "BookIDChangeEventArg")
            MyBase.Columns.Add(Me.columnBookID)
            Me.columnRating = New System.Data.DataColumn("Rating", GetType(Long), Nothing, System.Data.MappingType.Element)
            Me.columnRating.ExtendedProperties.Add("Generator_ChangedEventName", "RatingChanged")
            Me.columnRating.ExtendedProperties.Add("Generator_ChangingEventName", "RatingChanging")
            Me.columnRating.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Rating")
            Me.columnRating.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RatingColumn")
            Me.columnRating.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRating")
            Me.columnRating.ExtendedProperties.Add("Generator_DelegateName", "RatingChangeEventHandler")
            Me.columnRating.ExtendedProperties.Add("Generator_EventArgName", "RatingChangeEventArg")
            MyBase.Columns.Add(Me.columnRating)
            Me.columnReview = New System.Data.DataColumn("Review", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnReview.ExtendedProperties.Add("Generator_ChangedEventName", "ReviewChanged")
            Me.columnReview.ExtendedProperties.Add("Generator_ChangingEventName", "ReviewChanging")
            Me.columnReview.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Review")
            Me.columnReview.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ReviewColumn")
            Me.columnReview.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnReview")
            Me.columnReview.ExtendedProperties.Add("Generator_DelegateName", "ReviewChangeEventHandler")
            Me.columnReview.ExtendedProperties.Add("Generator_EventArgName", "ReviewChangeEventArg")
            MyBase.Columns.Add(Me.columnReview)
            Me.ExtendedProperties.Add("Generator_RowClassName", "BookReviewsRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "BookReviewsRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "BookReviewsRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "BookReviewsDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "BookReviews")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableBookReviews")
        End Sub
        
        Public Function NewBookReviewsRow() As BookReviewsRow
            Return CType(Me.NewRow,BookReviewsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New BookReviewsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BookReviewsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookReviewsRowChangedEvent) Is Nothing) Then
                RaiseEvent BookReviewsRowChanged(Me, New BookReviewsRowChangeEvent(CType(e.Row,BookReviewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookReviewsRowChangingEvent) Is Nothing) Then
                RaiseEvent BookReviewsRowChanging(Me, New BookReviewsRowChangeEvent(CType(e.Row,BookReviewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookReviewsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BookReviewsRowDeleted(Me, New BookReviewsRowChangeEvent(CType(e.Row,BookReviewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookReviewsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BookReviewsRowDeleting(Me, New BookReviewsRowChangeEvent(CType(e.Row,BookReviewsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBookReviewsRow(ByVal row As BookReviewsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As BookDataSet = New BookDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BookReviewsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub BookIDChangeEventHandler(ByVal sender As BookReviewsDataTable, ByVal e As BookIDChangeEventArg)
        
        Public Class BookIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As BookReviewsRow
                Get
                    Return CType(Me.evArgs.Row,BookReviewsRow)
                End Get
            End Property
            
            Public ReadOnly Property BookIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Long
                Get
                    Return CType(Me.evArgs.ProposedValue,Long)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Long)
                End Set
            End Property
        End Class
        
        Public Delegate Sub RatingChangeEventHandler(ByVal sender As BookReviewsDataTable, ByVal e As RatingChangeEventArg)
        
        Public Class RatingChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As BookReviewsRow
                Get
                    Return CType(Me.evArgs.Row,BookReviewsRow)
                End Get
            End Property
            
            Public ReadOnly Property RatingColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Long
                Get
                    Return CType(Me.evArgs.ProposedValue,Long)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Long)
                End Set
            End Property
        End Class
        
        Public Delegate Sub ReviewChangeEventHandler(ByVal sender As BookReviewsDataTable, ByVal e As ReviewChangeEventArg)
        
        Public Class ReviewChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As BookReviewsRow
                Get
                    Return CType(Me.evArgs.Row,BookReviewsRow)
                End Get
            End Property
            
            Public ReadOnly Property ReviewColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
    End Class
    
    Public Class BooksRow
        Inherits System.Data.DataRow
        
        Private tableBooks As BooksDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBooks = CType(Me.Table,BooksDataTable)
        End Sub
        
        Public Property BookID() As Long
            Get
                Return CType(Me(Me.tableBooks.BookIDColumn),Long)
            End Get
            Set
                Me(Me.tableBooks.BookIDColumn) = value
            End Set
        End Property
        
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tableBooks.TitleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableBooks.TitleColumn) = value
            End Set
        End Property
        
        Public Property Publisher() As String
            Get
                Try 
                    Return CType(Me(Me.tableBooks.PublisherColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableBooks.PublisherColumn) = value
            End Set
        End Property
        
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableBooks.TitleColumn)
        End Function
        
        Public Sub SetTitleNull()
            Me(Me.tableBooks.TitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPublisherNull() As Boolean
            Return Me.IsNull(Me.tableBooks.PublisherColumn)
        End Function
        
        Public Sub SetPublisherNull()
            Me(Me.tableBooks.PublisherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBookReviewsRows() As BookReviewsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("KeyBookIDRef")),BookReviewsRow())
        End Function
    End Class
    
    Public Class BookReviewsRow
        Inherits System.Data.DataRow
        
        Private tableBookReviews As BookReviewsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBookReviews = CType(Me.Table,BookReviewsDataTable)
        End Sub
        
        Public Property BookID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.BookIDColumn),Long)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.BookIDColumn) = value
            End Set
        End Property
        
        Public Property Rating() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.RatingColumn),Long)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.RatingColumn) = value
            End Set
        End Property
        
        Public Property Review() As String
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.ReviewColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.ReviewColumn) = value
            End Set
        End Property
        
        Public Property BooksRow() As BooksRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("KeyBookIDRef")),BooksRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("KeyBookIDRef"))
            End Set
        End Property
        
        Public Function IsBookIDNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.BookIDColumn)
        End Function
        
        Public Sub SetBookIDNull()
            Me(Me.tableBookReviews.BookIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRatingNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.RatingColumn)
        End Function
        
        Public Sub SetRatingNull()
            Me(Me.tableBookReviews.RatingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReviewNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.ReviewColumn)
        End Function
        
        Public Sub SetReviewNull()
            Me(Me.tableBookReviews.ReviewColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class BooksRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As BooksRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As BooksRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As BooksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class BookReviewsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As BookReviewsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As BookReviewsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As BookReviewsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
