'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50215.44
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("BookDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
 System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")>  _
Partial Public Class BookDataSet
    Inherits System.Data.DataSet
    
    Private tableBooks As BooksDataTable
    
    Private tableBookReviews As BookReviewsDataTable
    
    Private relationReviews As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Books")) Is Nothing) Then
                MyBase.Tables.Add(New BooksDataTable(ds.Tables("Books")))
            End If
            If (Not (ds.Tables("BookReviews")) Is Nothing) Then
                MyBase.Tables.Add(New BookReviewsDataTable(ds.Tables("BookReviews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Books() As BooksDataTable
        Get
            Return Me.tableBooks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BookReviews() As BookReviewsDataTable
        Get
            Return Me.tableBookReviews
        End Get
    End Property
    
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As BookDataSet = CType(MyBase.Clone,BookDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Books")) Is Nothing) Then
                MyBase.Tables.Add(New BooksDataTable(ds.Tables("Books")))
            End If
            If (Not (ds.Tables("BookReviews")) Is Nothing) Then
                MyBase.Tables.Add(New BookReviewsDataTable(ds.Tables("BookReviews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBooks = CType(MyBase.Tables("Books"),BooksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBooks) Is Nothing) Then
                Me.tableBooks.InitVars
            End If
        End If
        Me.tableBookReviews = CType(MyBase.Tables("BookReviews"),BookReviewsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBookReviews) Is Nothing) Then
                Me.tableBookReviews.InitVars
            End If
        End If
        Me.relationReviews = Me.Relations("Reviews")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BookDataSet"
        Me.Prefix = ""
        Me.Namespace = "urn:apress-proadonet-chapter5-BookDataSet.xsd"
        Me.EnforceConstraints = true
        Me.tableBooks = New BooksDataTable
        MyBase.Tables.Add(Me.tableBooks)
        Me.tableBookReviews = New BookReviewsDataTable
        MyBase.Tables.Add(Me.tableBookReviews)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("Reviews", New System.Data.DataColumn() {Me.tableBooks.BookIDColumn}, New System.Data.DataColumn() {Me.tableBookReviews.BookIDColumn})
        Me.tableBookReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationReviews = New System.Data.DataRelation("Reviews", New System.Data.DataColumn() {Me.tableBooks.BookIDColumn}, New System.Data.DataColumn() {Me.tableBookReviews.BookIDColumn}, false)
        Me.relationReviews.ExtendedProperties.Add("typedChildren", "Reviews")
        Me.relationReviews.ExtendedProperties.Add("typedParent", "Book")
        Me.Relations.Add(Me.relationReviews)
    End Sub
    
    Private Function ShouldSerializeBooks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBookReviews() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BookDataSet = New BookDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub BookChangeEventHandler(ByVal sender As Object, ByVal e As BookChangeEvent)
    
    Public Delegate Sub BookReviewChangeEventHandler(ByVal sender As Object, ByVal e As BookReviewChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BooksDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookID As System.Data.DataColumn
        
        Private columnTitle As System.Data.DataColumn
        
        Private columnPublisher As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Books"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property BookIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        Public ReadOnly Property TitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Public ReadOnly Property PublisherColumn() As System.Data.DataColumn
            Get
                Return Me.columnPublisher
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Book
            Get
                Return CType(Me.Rows(index),Book)
            End Get
        End Property
        
        Public Event BookChanged As BookChangeEventHandler
        
        Public Event BookChanging As BookChangeEventHandler
        
        Public Event BookDeleted As BookChangeEventHandler
        
        Public Event BookDeleting As BookChangeEventHandler
        
        Public Overloads Sub AddBook(ByVal row As Book)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBook(ByVal BookID As Long, ByVal Title As String, ByVal Publisher As String) As Book
            Dim rowBook As Book = CType(Me.NewRow,Book)
            rowBook.ItemArray = New Object() {BookID, Title, Publisher}
            Me.Rows.Add(rowBook)
            Return rowBook
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BooksDataTable = CType(MyBase.Clone,BooksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BooksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookID = MyBase.Columns("BookID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnPublisher = MyBase.Columns("Publisher")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookID = New System.Data.DataColumn("BookID", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookID)
            Me.columnTitle = New System.Data.DataColumn("Title", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnPublisher = New System.Data.DataColumn("Publisher", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublisher)
            Me.Constraints.Add(New System.Data.UniqueConstraint("KeyBookID", New System.Data.DataColumn() {Me.columnBookID}, false))
            Me.columnBookID.AllowDBNull = false
            Me.columnBookID.Unique = true
            Me.columnTitle.AllowDBNull = false
            Me.columnPublisher.AllowDBNull = false
            Me.ExtendedProperties.Add("typedName", "Book")
            Me.ExtendedProperties.Add("typedPlural", "Books")
        End Sub
        
        Public Function NewBook() As Book
            Return CType(Me.NewRow,Book)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Book(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Book)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookChangedEvent) Is Nothing) Then
                RaiseEvent BookChanged(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookChangingEvent) Is Nothing) Then
                RaiseEvent BookChanging(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookDeletedEvent) Is Nothing) Then
                RaiseEvent BookDeleted(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookDeletingEvent) Is Nothing) Then
                RaiseEvent BookDeleting(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBook(ByVal row As Book)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As BookDataSet = New BookDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BooksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BookReviewsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookID As System.Data.DataColumn
        
        Private columnRating As System.Data.DataColumn
        
        Private columnReview As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "BookReviews"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property BookIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        Public ReadOnly Property RatingColumn() As System.Data.DataColumn
            Get
                Return Me.columnRating
            End Get
        End Property
        
        Public ReadOnly Property ReviewColumn() As System.Data.DataColumn
            Get
                Return Me.columnReview
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BookReview
            Get
                Return CType(Me.Rows(index),BookReview)
            End Get
        End Property
        
        Public Event BookReviewChanged As BookReviewChangeEventHandler
        
        Public Event BookReviewChanging As BookReviewChangeEventHandler
        
        Public Event BookReviewDeleted As BookReviewChangeEventHandler
        
        Public Event BookReviewDeleting As BookReviewChangeEventHandler
        
        Public Overloads Sub AddBookReview(ByVal row As BookReview)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBookReview(ByVal parentBookByReviews As Book, ByVal Rating As Long, ByVal Review As String) As BookReview
            Dim rowBookReview As BookReview = CType(Me.NewRow,BookReview)
            rowBookReview.ItemArray = New Object() {parentBookByReviews(0), Rating, Review}
            Me.Rows.Add(rowBookReview)
            Return rowBookReview
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BookReviewsDataTable = CType(MyBase.Clone,BookReviewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BookReviewsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookID = MyBase.Columns("BookID")
            Me.columnRating = MyBase.Columns("Rating")
            Me.columnReview = MyBase.Columns("Review")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookID = New System.Data.DataColumn("BookID", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookID)
            Me.columnRating = New System.Data.DataColumn("Rating", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRating)
            Me.columnReview = New System.Data.DataColumn("Review", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReview)
            Me.ExtendedProperties.Add("typedName", "BookReview")
            Me.ExtendedProperties.Add("typedPlural", "BookReviews")
        End Sub
        
        Public Function NewBookReview() As BookReview
            Return CType(Me.NewRow,BookReview)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New BookReview(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BookReview)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookReviewChangedEvent) Is Nothing) Then
                RaiseEvent BookReviewChanged(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookReviewChangingEvent) Is Nothing) Then
                RaiseEvent BookReviewChanging(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookReviewDeletedEvent) Is Nothing) Then
                RaiseEvent BookReviewDeleted(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookReviewDeletingEvent) Is Nothing) Then
                RaiseEvent BookReviewDeleting(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBookReview(ByVal row As BookReview)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As BookDataSet = New BookDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BookReviewsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class Book
        Inherits System.Data.DataRow
        
        Private tableBooks As BooksDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBooks = CType(Me.Table,BooksDataTable)
        End Sub
        
        Public Property BookID() As Long
            Get
                Return CType(Me(Me.tableBooks.BookIDColumn),Long)
            End Get
            Set
                Me(Me.tableBooks.BookIDColumn) = value
            End Set
        End Property
        
        Public Property Title() As String
            Get
                Return CType(Me(Me.tableBooks.TitleColumn),String)
            End Get
            Set
                Me(Me.tableBooks.TitleColumn) = value
            End Set
        End Property
        
        Public Property Publisher() As String
            Get
                Return CType(Me(Me.tableBooks.PublisherColumn),String)
            End Get
            Set
                Me(Me.tableBooks.PublisherColumn) = value
            End Set
        End Property
        
        Public Function Reviews() As BookReview()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reviews")),BookReview())
        End Function
    End Class
    
    Partial Public Class BookReview
        Inherits System.Data.DataRow
        
        Private tableBookReviews As BookReviewsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBookReviews = CType(Me.Table,BookReviewsDataTable)
        End Sub
        
        Public Property BookID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.BookIDColumn),Long)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BookID' in table 'BookReviews' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.BookIDColumn) = value
            End Set
        End Property
        
        Public Property Rating() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.RatingColumn),Long)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Rating' in table 'BookReviews' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.RatingColumn) = value
            End Set
        End Property
        
        Public Property Review() As String
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.ReviewColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Review' in table 'BookReviews' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.ReviewColumn) = value
            End Set
        End Property
        
        Public Property Book() As Book
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reviews")),Book)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reviews"))
            End Set
        End Property
        
        Public Function IsBookIDNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.BookIDColumn)
        End Function
        
        Public Sub SetBookIDNull()
            Me(Me.tableBookReviews.BookIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRatingNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.RatingColumn)
        End Function
        
        Public Sub SetRatingNull()
            Me(Me.tableBookReviews.RatingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReviewNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.ReviewColumn)
        End Function
        
        Public Sub SetReviewNull()
            Me(Me.tableBookReviews.ReviewColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class BookChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Book
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As Book, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As Book
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class BookReviewChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As BookReview
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As BookReview, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As BookReview
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
