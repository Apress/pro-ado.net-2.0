//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Example_6_7 {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("BookDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")]
    public partial class BookDataSet : System.Data.DataSet {
        
        private BooksDataTable tableBooks;
        
        private BookReviewsDataTable tableBookReviews;
        
        private System.Data.DataRelation relationKeyTitleRef;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public BookDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        protected BookDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Books"] != null)) {
                    base.Tables.Add(new BooksDataTable(ds.Tables["Books"]));
                }
                if ((ds.Tables["BookReviews"] != null)) {
                    base.Tables.Add(new BookReviewsDataTable(ds.Tables["BookReviews"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BooksDataTable Books {
            get {
                return this.tableBooks;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BookReviewsDataTable BookReviews {
            get {
                return this.tableBookReviews;
            }
        }
        
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        public override System.Data.DataSet Clone() {
            BookDataSet cln = ((BookDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Books"] != null)) {
                    base.Tables.Add(new BooksDataTable(ds.Tables["Books"]));
                }
                if ((ds.Tables["BookReviews"] != null)) {
                    base.Tables.Add(new BookReviewsDataTable(ds.Tables["BookReviews"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableBooks = ((BooksDataTable)(base.Tables["Books"]));
            if ((initTable == true)) {
                if ((this.tableBooks != null)) {
                    this.tableBooks.InitVars();
                }
            }
            this.tableBookReviews = ((BookReviewsDataTable)(base.Tables["BookReviews"]));
            if ((initTable == true)) {
                if ((this.tableBookReviews != null)) {
                    this.tableBookReviews.InitVars();
                }
            }
            this.relationKeyTitleRef = this.Relations["KeyTitleRef"];
        }
        
        private void InitClass() {
            this.DataSetName = "BookDataSet";
            this.Prefix = "";
            this.Namespace = "urn:apress-proadonet-chapter6-BookDataSet.xsd";
            this.EnforceConstraints = true;
            this.tableBooks = new BooksDataTable();
            base.Tables.Add(this.tableBooks);
            this.tableBookReviews = new BookReviewsDataTable();
            base.Tables.Add(this.tableBookReviews);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("KeyTitleRef", new System.Data.DataColumn[] {
                        this.tableBooks.BookIDColumn}, new System.Data.DataColumn[] {
                        this.tableBookReviews.BookIDColumn});
            this.tableBookReviews.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationKeyTitleRef = new System.Data.DataRelation("KeyTitleRef", new System.Data.DataColumn[] {
                        this.tableBooks.BookIDColumn}, new System.Data.DataColumn[] {
                        this.tableBookReviews.BookIDColumn}, false);
            this.Relations.Add(this.relationKeyTitleRef);
        }
        
        private bool ShouldSerializeBooks() {
            return false;
        }
        
        private bool ShouldSerializeBookReviews() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            BookDataSet ds = new BookDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BooksRowChangeEventHandler(object sender, BooksRowChangeEvent e);
        
        public delegate void BookReviewsRowChangeEventHandler(object sender, BookReviewsRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BooksDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBookID;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnPublisher;
            
            public BooksDataTable() {
                this.TableName = "Books";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal BooksDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected BooksDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn BookIDColumn {
                get {
                    return this.columnBookID;
                }
            }
            
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            public System.Data.DataColumn PublisherColumn {
                get {
                    return this.columnPublisher;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public BooksRow this[int index] {
                get {
                    return ((BooksRow)(this.Rows[index]));
                }
            }
            
            public event BooksRowChangeEventHandler BooksRowChanged;
            
            public event BooksRowChangeEventHandler BooksRowChanging;
            
            public event BooksRowChangeEventHandler BooksRowDeleted;
            
            public event BooksRowChangeEventHandler BooksRowDeleting;
            
            public void AddBooksRow(BooksRow row) {
                this.Rows.Add(row);
            }
            
            public BooksRow AddBooksRow(long BookID, string Title, string Publisher) {
                BooksRow rowBooksRow = ((BooksRow)(this.NewRow()));
                rowBooksRow.ItemArray = new object[] {
                        BookID,
                        Title,
                        Publisher};
                this.Rows.Add(rowBooksRow);
                return rowBooksRow;
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                BooksDataTable cln = ((BooksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new BooksDataTable();
            }
            
            internal void InitVars() {
                this.columnBookID = base.Columns["BookID"];
                this.columnTitle = base.Columns["Title"];
                this.columnPublisher = base.Columns["Publisher"];
            }
            
            private void InitClass() {
                this.columnBookID = new System.Data.DataColumn("BookID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookID);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnPublisher = new System.Data.DataColumn("Publisher", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPublisher);
                this.Constraints.Add(new System.Data.UniqueConstraint("KeyTitle", new System.Data.DataColumn[] {
                                this.columnBookID}, false));
                this.columnBookID.AllowDBNull = false;
                this.columnBookID.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnPublisher.AllowDBNull = false;
            }
            
            public BooksRow NewBooksRow() {
                return ((BooksRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BooksRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BooksRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BooksRowChanged != null)) {
                    this.BooksRowChanged(this, new BooksRowChangeEvent(((BooksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BooksRowChanging != null)) {
                    this.BooksRowChanging(this, new BooksRowChangeEvent(((BooksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BooksRowDeleted != null)) {
                    this.BooksRowDeleted(this, new BooksRowChangeEvent(((BooksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BooksRowDeleting != null)) {
                    this.BooksRowDeleting(this, new BooksRowChangeEvent(((BooksRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBooksRow(BooksRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BookDataSet ds = new BookDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BooksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BookReviewsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBookID;
            
            private System.Data.DataColumn columnRating;
            
            private System.Data.DataColumn columnReview;
            
            public BookReviewsDataTable() {
                this.TableName = "BookReviews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal BookReviewsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected BookReviewsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn BookIDColumn {
                get {
                    return this.columnBookID;
                }
            }
            
            public System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            public System.Data.DataColumn ReviewColumn {
                get {
                    return this.columnReview;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public BookReviewsRow this[int index] {
                get {
                    return ((BookReviewsRow)(this.Rows[index]));
                }
            }
            
            public event BookReviewsRowChangeEventHandler BookReviewsRowChanged;
            
            public event BookReviewsRowChangeEventHandler BookReviewsRowChanging;
            
            public event BookReviewsRowChangeEventHandler BookReviewsRowDeleted;
            
            public event BookReviewsRowChangeEventHandler BookReviewsRowDeleting;
            
            public void AddBookReviewsRow(BookReviewsRow row) {
                this.Rows.Add(row);
            }
            
            public BookReviewsRow AddBookReviewsRow(BooksRow parentBooksRowByKeyTitleRef, long Rating, string Review) {
                BookReviewsRow rowBookReviewsRow = ((BookReviewsRow)(this.NewRow()));
                rowBookReviewsRow.ItemArray = new object[] {
                        parentBooksRowByKeyTitleRef[0],
                        Rating,
                        Review};
                this.Rows.Add(rowBookReviewsRow);
                return rowBookReviewsRow;
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                BookReviewsDataTable cln = ((BookReviewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new BookReviewsDataTable();
            }
            
            internal void InitVars() {
                this.columnBookID = base.Columns["BookID"];
                this.columnRating = base.Columns["Rating"];
                this.columnReview = base.Columns["Review"];
            }
            
            private void InitClass() {
                this.columnBookID = new System.Data.DataColumn("BookID", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookID);
                this.columnRating = new System.Data.DataColumn("Rating", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRating);
                this.columnReview = new System.Data.DataColumn("Review", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReview);
                this.columnBookID.AllowDBNull = false;
                this.columnRating.AllowDBNull = false;
            }
            
            public BookReviewsRow NewBookReviewsRow() {
                return ((BookReviewsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BookReviewsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BookReviewsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BookReviewsRowChanged != null)) {
                    this.BookReviewsRowChanged(this, new BookReviewsRowChangeEvent(((BookReviewsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BookReviewsRowChanging != null)) {
                    this.BookReviewsRowChanging(this, new BookReviewsRowChangeEvent(((BookReviewsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BookReviewsRowDeleted != null)) {
                    this.BookReviewsRowDeleted(this, new BookReviewsRowChangeEvent(((BookReviewsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BookReviewsRowDeleting != null)) {
                    this.BookReviewsRowDeleting(this, new BookReviewsRowChangeEvent(((BookReviewsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBookReviewsRow(BookReviewsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BookDataSet ds = new BookDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BookReviewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class BooksRow : System.Data.DataRow {
            
            private BooksDataTable tableBooks;
            
            internal BooksRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBooks = ((BooksDataTable)(this.Table));
            }
            
            public long BookID {
                get {
                    return ((long)(this[this.tableBooks.BookIDColumn]));
                }
                set {
                    this[this.tableBooks.BookIDColumn] = value;
                }
            }
            
            public string Title {
                get {
                    return ((string)(this[this.tableBooks.TitleColumn]));
                }
                set {
                    this[this.tableBooks.TitleColumn] = value;
                }
            }
            
            public string Publisher {
                get {
                    return ((string)(this[this.tableBooks.PublisherColumn]));
                }
                set {
                    this[this.tableBooks.PublisherColumn] = value;
                }
            }
            
            public BookReviewsRow[] GetBookReviewsRows() {
                return ((BookReviewsRow[])(base.GetChildRows(this.Table.ChildRelations["KeyTitleRef"])));
            }
        }
        
        public partial class BookReviewsRow : System.Data.DataRow {
            
            private BookReviewsDataTable tableBookReviews;
            
            internal BookReviewsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBookReviews = ((BookReviewsDataTable)(this.Table));
            }
            
            public long BookID {
                get {
                    return ((long)(this[this.tableBookReviews.BookIDColumn]));
                }
                set {
                    this[this.tableBookReviews.BookIDColumn] = value;
                }
            }
            
            public long Rating {
                get {
                    return ((long)(this[this.tableBookReviews.RatingColumn]));
                }
                set {
                    this[this.tableBookReviews.RatingColumn] = value;
                }
            }
            
            public string Review {
                get {
                    try {
                        return ((string)(this[this.tableBookReviews.ReviewColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Review\' in table \'BookReviews\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBookReviews.ReviewColumn] = value;
                }
            }
            
            public BooksRow BooksRow {
                get {
                    return ((BooksRow)(this.GetParentRow(this.Table.ParentRelations["KeyTitleRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KeyTitleRef"]);
                }
            }
            
            public bool IsReviewNull() {
                return this.IsNull(this.tableBookReviews.ReviewColumn);
            }
            
            public void SetReviewNull() {
                this[this.tableBookReviews.ReviewColumn] = System.Convert.DBNull;
            }
        }
        
        public class BooksRowChangeEvent : System.EventArgs {
            
            private BooksRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public BooksRowChangeEvent(BooksRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BooksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class BookReviewsRowChangeEvent : System.EventArgs {
            
            private BookReviewsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public BookReviewsRowChangeEvent(BookReviewsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BookReviewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
