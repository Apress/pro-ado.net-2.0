'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50215.44
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("AnimalsDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet"),  _
 System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly")>  _
Partial Public Class AnimalsDataSet
    Inherits System.Data.DataSet
    
    Private tableAnimals As AnimalsDataTable
    
    Private tablePets As PetsDataTable
    
    Private tablePetBelonging As PetBelongingDataTable
    
    Private relationFK_Animals_Pets As System.Data.DataRelation
    
    Private relationFK_Pets_PetBelonging As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Animals")) Is Nothing) Then
                MyBase.Tables.Add(New AnimalsDataTable(ds.Tables("Animals")))
            End If
            If (Not (ds.Tables("Pets")) Is Nothing) Then
                MyBase.Tables.Add(New PetsDataTable(ds.Tables("Pets")))
            End If
            If (Not (ds.Tables("PetBelonging")) Is Nothing) Then
                MyBase.Tables.Add(New PetBelongingDataTable(ds.Tables("PetBelonging")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Animals() As AnimalsDataTable
        Get
            Return Me.tableAnimals
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pets() As PetsDataTable
        Get
            Return Me.tablePets
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PetBelonging() As PetBelongingDataTable
        Get
            Return Me.tablePetBelonging
        End Get
    End Property
    
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(false)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As AnimalsDataSet = CType(MyBase.Clone,AnimalsDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Animals")) Is Nothing) Then
                MyBase.Tables.Add(New AnimalsDataTable(ds.Tables("Animals")))
            End If
            If (Not (ds.Tables("Pets")) Is Nothing) Then
                MyBase.Tables.Add(New PetsDataTable(ds.Tables("Pets")))
            End If
            If (Not (ds.Tables("PetBelonging")) Is Nothing) Then
                MyBase.Tables.Add(New PetBelongingDataTable(ds.Tables("PetBelonging")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAnimals = CType(MyBase.Tables("Animals"),AnimalsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAnimals) Is Nothing) Then
                Me.tableAnimals.InitVars
            End If
        End If
        Me.tablePets = CType(MyBase.Tables("Pets"),PetsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePets) Is Nothing) Then
                Me.tablePets.InitVars
            End If
        End If
        Me.tablePetBelonging = CType(MyBase.Tables("PetBelonging"),PetBelongingDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePetBelonging) Is Nothing) Then
                Me.tablePetBelonging.InitVars
            End If
        End If
        Me.relationFK_Animals_Pets = Me.Relations("FK_Animals_Pets")
        Me.relationFK_Pets_PetBelonging = Me.Relations("FK_Pets_PetBelonging")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "AnimalsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AnimalsDataSet.xsd"
        Me.EnforceConstraints = false
        Me.tableAnimals = New AnimalsDataTable
        MyBase.Tables.Add(Me.tableAnimals)
        Me.tablePets = New PetsDataTable
        MyBase.Tables.Add(Me.tablePets)
        Me.tablePetBelonging = New PetBelongingDataTable
        MyBase.Tables.Add(Me.tablePetBelonging)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("FK_Animals_Pets", New System.Data.DataColumn() {Me.tableAnimals.AnimalIDColumn}, New System.Data.DataColumn() {Me.tablePets.AnimalIDColumn})
        Me.tablePets.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FK_Pets_PetBelonging", New System.Data.DataColumn() {Me.tablePets.PetIDColumn}, New System.Data.DataColumn() {Me.tablePetBelonging.PetIDColumn})
        Me.tablePetBelonging.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationFK_Animals_Pets = New System.Data.DataRelation("FK_Animals_Pets", New System.Data.DataColumn() {Me.tableAnimals.AnimalIDColumn}, New System.Data.DataColumn() {Me.tablePets.AnimalIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Animals_Pets)
        Me.relationFK_Pets_PetBelonging = New System.Data.DataRelation("FK_Pets_PetBelonging", New System.Data.DataColumn() {Me.tablePets.PetIDColumn}, New System.Data.DataColumn() {Me.tablePetBelonging.PetIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Pets_PetBelonging)
    End Sub
    
    Private Function ShouldSerializeAnimals() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePets() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePetBelonging() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AnimalsDataSet = New AnimalsDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub AnimalsRowChangeEventHandler(ByVal sender As Object, ByVal e As AnimalsRowChangeEvent)
    
    Public Delegate Sub PetsRowChangeEventHandler(ByVal sender As Object, ByVal e As PetsRowChangeEvent)
    
    Public Delegate Sub PetBelongingRowChangeEventHandler(ByVal sender As Object, ByVal e As PetBelongingRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AnimalsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAnimalID As System.Data.DataColumn
        
        Private columnAnimalType As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Animals"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property AnimalIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        Public ReadOnly Property AnimalTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnAnimalType
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AnimalsRow
            Get
                Return CType(Me.Rows(index),AnimalsRow)
            End Get
        End Property
        
        Public Event AnimalsRowChanged As AnimalsRowChangeEventHandler
        
        Public Event AnimalsRowChanging As AnimalsRowChangeEventHandler
        
        Public Event AnimalsRowDeleted As AnimalsRowChangeEventHandler
        
        Public Event AnimalsRowDeleting As AnimalsRowChangeEventHandler
        
        Public Overloads Sub AddAnimalsRow(ByVal row As AnimalsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAnimalsRow(ByVal AnimalType As String) As AnimalsRow
            Dim rowAnimalsRow As AnimalsRow = CType(Me.NewRow,AnimalsRow)
            rowAnimalsRow.ItemArray = New Object() {Nothing, AnimalType}
            Me.Rows.Add(rowAnimalsRow)
            Return rowAnimalsRow
        End Function
        
        Public Function FindByAnimalID(ByVal AnimalID As Integer) As AnimalsRow
            Return CType(Me.Rows.Find(New Object() {AnimalID}),AnimalsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AnimalsDataTable = CType(MyBase.Clone,AnimalsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AnimalsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnAnimalType = MyBase.Columns("AnimalType")
        End Sub
        
        Private Sub InitClass()
            Me.columnAnimalID = New System.Data.DataColumn("AnimalID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnAnimalType = New System.Data.DataColumn("AnimalType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalType)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAnimalID}, true))
            Me.columnAnimalID.AutoIncrement = true
            Me.columnAnimalID.AutoIncrementStep = -1
            Me.columnAnimalID.AllowDBNull = false
            Me.columnAnimalID.ReadOnly = true
            Me.columnAnimalID.Unique = true
        End Sub
        
        Public Function NewAnimalsRow() As AnimalsRow
            Return CType(Me.NewRow,AnimalsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AnimalsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AnimalsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AnimalsRowChangedEvent) Is Nothing) Then
                RaiseEvent AnimalsRowChanged(Me, New AnimalsRowChangeEvent(CType(e.Row,AnimalsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AnimalsRowChangingEvent) Is Nothing) Then
                RaiseEvent AnimalsRowChanging(Me, New AnimalsRowChangeEvent(CType(e.Row,AnimalsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AnimalsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AnimalsRowDeleted(Me, New AnimalsRowChangeEvent(CType(e.Row,AnimalsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AnimalsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AnimalsRowDeleting(Me, New AnimalsRowChangeEvent(CType(e.Row,AnimalsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAnimalsRow(ByVal row As AnimalsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As AnimalsDataSet = New AnimalsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AnimalsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PetsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPetID As System.Data.DataColumn
        
        Private columnAnimalID As System.Data.DataColumn
        
        Private columnFirstName As System.Data.DataColumn
        
        Private columnLastName As System.Data.DataColumn
        
        Private columnWeight As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Pets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property PetIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPetID
            End Get
        End Property
        
        Public ReadOnly Property AnimalIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        Public ReadOnly Property FirstNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Public ReadOnly Property LastNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Public ReadOnly Property WeightColumn() As System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PetsRow
            Get
                Return CType(Me.Rows(index),PetsRow)
            End Get
        End Property
        
        Public Event PetsRowChanged As PetsRowChangeEventHandler
        
        Public Event PetsRowChanging As PetsRowChangeEventHandler
        
        Public Event PetsRowDeleted As PetsRowChangeEventHandler
        
        Public Event PetsRowDeleting As PetsRowChangeEventHandler
        
        Public Overloads Sub AddPetsRow(ByVal row As PetsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPetsRow(ByVal parentAnimalsRowByFK_Animals_Pets As AnimalsRow, ByVal FirstName As String, ByVal LastName As String, ByVal Weight As Integer) As PetsRow
            Dim rowPetsRow As PetsRow = CType(Me.NewRow,PetsRow)
            rowPetsRow.ItemArray = New Object() {Nothing, parentAnimalsRowByFK_Animals_Pets(0), FirstName, LastName, Weight}
            Me.Rows.Add(rowPetsRow)
            Return rowPetsRow
        End Function
        
        Public Function FindByPetID(ByVal PetID As Integer) As PetsRow
            Return CType(Me.Rows.Find(New Object() {PetID}),PetsRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PetsDataTable = CType(MyBase.Clone,PetsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PetsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPetID = MyBase.Columns("PetID")
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnWeight = MyBase.Columns("Weight")
        End Sub
        
        Private Sub InitClass()
            Me.columnPetID = New System.Data.DataColumn("PetID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPetID)
            Me.columnAnimalID = New System.Data.DataColumn("AnimalID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnFirstName = New System.Data.DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New System.Data.DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnWeight = New System.Data.DataColumn("Weight", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPetID}, true))
            Me.columnPetID.AutoIncrement = true
            Me.columnPetID.AutoIncrementStep = -1
            Me.columnPetID.AllowDBNull = false
            Me.columnPetID.ReadOnly = true
            Me.columnPetID.Unique = true
        End Sub
        
        Public Function NewPetsRow() As PetsRow
            Return CType(Me.NewRow,PetsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PetsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PetsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PetsRowChangedEvent) Is Nothing) Then
                RaiseEvent PetsRowChanged(Me, New PetsRowChangeEvent(CType(e.Row,PetsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PetsRowChangingEvent) Is Nothing) Then
                RaiseEvent PetsRowChanging(Me, New PetsRowChangeEvent(CType(e.Row,PetsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PetsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PetsRowDeleted(Me, New PetsRowChangeEvent(CType(e.Row,PetsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PetsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PetsRowDeleting(Me, New PetsRowChangeEvent(CType(e.Row,PetsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePetsRow(ByVal row As PetsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As AnimalsDataSet = New AnimalsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PetsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PetBelongingDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPetBelongingID As System.Data.DataColumn
        
        Private columnPetID As System.Data.DataColumn
        
        Private columnPrice As System.Data.DataColumn
        
        Private columnName As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "PetBelonging"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property PetBelongingIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPetBelongingID
            End Get
        End Property
        
        Public ReadOnly Property PetIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPetID
            End Get
        End Property
        
        Public ReadOnly Property PriceColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Public ReadOnly Property NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PetBelongingRow
            Get
                Return CType(Me.Rows(index),PetBelongingRow)
            End Get
        End Property
        
        Public Event PetBelongingRowChanged As PetBelongingRowChangeEventHandler
        
        Public Event PetBelongingRowChanging As PetBelongingRowChangeEventHandler
        
        Public Event PetBelongingRowDeleted As PetBelongingRowChangeEventHandler
        
        Public Event PetBelongingRowDeleting As PetBelongingRowChangeEventHandler
        
        Public Overloads Sub AddPetBelongingRow(ByVal row As PetBelongingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPetBelongingRow(ByVal parentPetsRowByFK_Pets_PetBelonging As PetsRow, ByVal Price As Decimal, ByVal Name As String) As PetBelongingRow
            Dim rowPetBelongingRow As PetBelongingRow = CType(Me.NewRow,PetBelongingRow)
            rowPetBelongingRow.ItemArray = New Object() {Nothing, parentPetsRowByFK_Pets_PetBelonging(0), Price, Name}
            Me.Rows.Add(rowPetBelongingRow)
            Return rowPetBelongingRow
        End Function
        
        Public Function FindByPetBelongingID(ByVal PetBelongingID As Integer) As PetBelongingRow
            Return CType(Me.Rows.Find(New Object() {PetBelongingID}),PetBelongingRow)
        End Function
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PetBelongingDataTable = CType(MyBase.Clone,PetBelongingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PetBelongingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPetBelongingID = MyBase.Columns("PetBelongingID")
            Me.columnPetID = MyBase.Columns("PetID")
            Me.columnPrice = MyBase.Columns("Price")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnPetBelongingID = New System.Data.DataColumn("PetBelongingID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPetBelongingID)
            Me.columnPetID = New System.Data.DataColumn("PetID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPetID)
            Me.columnPrice = New System.Data.DataColumn("Price", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice)
            Me.columnName = New System.Data.DataColumn("Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPetBelongingID}, true))
            Me.columnPetBelongingID.AutoIncrement = true
            Me.columnPetBelongingID.AutoIncrementStep = -1
            Me.columnPetBelongingID.AllowDBNull = false
            Me.columnPetBelongingID.ReadOnly = true
            Me.columnPetBelongingID.Unique = true
        End Sub
        
        Public Function NewPetBelongingRow() As PetBelongingRow
            Return CType(Me.NewRow,PetBelongingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PetBelongingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PetBelongingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PetBelongingRowChangedEvent) Is Nothing) Then
                RaiseEvent PetBelongingRowChanged(Me, New PetBelongingRowChangeEvent(CType(e.Row,PetBelongingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PetBelongingRowChangingEvent) Is Nothing) Then
                RaiseEvent PetBelongingRowChanging(Me, New PetBelongingRowChangeEvent(CType(e.Row,PetBelongingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PetBelongingRowDeletedEvent) Is Nothing) Then
                RaiseEvent PetBelongingRowDeleted(Me, New PetBelongingRowChangeEvent(CType(e.Row,PetBelongingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PetBelongingRowDeletingEvent) Is Nothing) Then
                RaiseEvent PetBelongingRowDeleting(Me, New PetBelongingRowChangeEvent(CType(e.Row,PetBelongingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePetBelongingRow(ByVal row As PetBelongingRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As AnimalsDataSet = New AnimalsDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PetBelongingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class AnimalsRow
        Inherits System.Data.DataRow
        
        Private tableAnimals As AnimalsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAnimals = CType(Me.Table,AnimalsDataTable)
        End Sub
        
        Public Property AnimalID() As Integer
            Get
                Return CType(Me(Me.tableAnimals.AnimalIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAnimals.AnimalIDColumn) = value
            End Set
        End Property
        
        Public Property AnimalType() As String
            Get
                Try 
                    Return CType(Me(Me.tableAnimals.AnimalTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AnimalType' in table 'Animals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAnimals.AnimalTypeColumn) = value
            End Set
        End Property
        
        Public Function IsAnimalTypeNull() As Boolean
            Return Me.IsNull(Me.tableAnimals.AnimalTypeColumn)
        End Function
        
        Public Sub SetAnimalTypeNull()
            Me(Me.tableAnimals.AnimalTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPetsRows() As PetsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Animals_Pets")),PetsRow())
        End Function
    End Class
    
    Partial Public Class PetsRow
        Inherits System.Data.DataRow
        
        Private tablePets As PetsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePets = CType(Me.Table,PetsDataTable)
        End Sub
        
        Public Property PetID() As Integer
            Get
                Return CType(Me(Me.tablePets.PetIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePets.PetIDColumn) = value
            End Set
        End Property
        
        Public Property AnimalID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePets.AnimalIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AnimalID' in table 'Pets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePets.AnimalIDColumn) = value
            End Set
        End Property
        
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePets.FirstNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FirstName' in table 'Pets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePets.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePets.LastNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LastName' in table 'Pets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePets.LastNameColumn) = value
            End Set
        End Property
        
        Public Property Weight() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePets.WeightColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Weight' in table 'Pets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePets.WeightColumn) = value
            End Set
        End Property
        
        Public Property AnimalsRow() As AnimalsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Animals_Pets")),AnimalsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Animals_Pets"))
            End Set
        End Property
        
        Public Function IsAnimalIDNull() As Boolean
            Return Me.IsNull(Me.tablePets.AnimalIDColumn)
        End Function
        
        Public Sub SetAnimalIDNull()
            Me(Me.tablePets.AnimalIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablePets.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tablePets.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tablePets.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tablePets.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tablePets.WeightColumn)
        End Function
        
        Public Sub SetWeightNull()
            Me(Me.tablePets.WeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPetBelongingRows() As PetBelongingRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Pets_PetBelonging")),PetBelongingRow())
        End Function
    End Class
    
    Partial Public Class PetBelongingRow
        Inherits System.Data.DataRow
        
        Private tablePetBelonging As PetBelongingDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePetBelonging = CType(Me.Table,PetBelongingDataTable)
        End Sub
        
        Public Property PetBelongingID() As Integer
            Get
                Return CType(Me(Me.tablePetBelonging.PetBelongingIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePetBelonging.PetBelongingIDColumn) = value
            End Set
        End Property
        
        Public Property PetID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePetBelonging.PetIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PetID' in table 'PetBelonging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePetBelonging.PetIDColumn) = value
            End Set
        End Property
        
        Public Property Price() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePetBelonging.PriceColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Price' in table 'PetBelonging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePetBelonging.PriceColumn) = value
            End Set
        End Property
        
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tablePetBelonging.NameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Name' in table 'PetBelonging' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePetBelonging.NameColumn) = value
            End Set
        End Property
        
        Public Property PetsRow() As PetsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Pets_PetBelonging")),PetsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Pets_PetBelonging"))
            End Set
        End Property
        
        Public Function IsPetIDNull() As Boolean
            Return Me.IsNull(Me.tablePetBelonging.PetIDColumn)
        End Function
        
        Public Sub SetPetIDNull()
            Me(Me.tablePetBelonging.PetIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tablePetBelonging.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tablePetBelonging.PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tablePetBelonging.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tablePetBelonging.NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class AnimalsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AnimalsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As AnimalsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As AnimalsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class PetsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PetsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As PetsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As PetsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class PetBelongingRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PetBelongingRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As PetBelongingRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As PetBelongingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
